import asyncio
import sqlite3
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from config import BOT_TOKEN, ADMIN_ID, CRYPTO_PAY_TOKEN, PAY_AMOUNT_USD, DB_PATH

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
admin_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, invited_by INTEGER, sub_active INTEGER)")
    conn.commit()
    conn.close()

def add_user(user_id, invited_by=None):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (id, invited_by, sub_active) VALUES (?, ?, ?)", (user_id, invited_by, 0))
    conn.commit()
    conn.close()

def is_subscribed(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT sub_active FROM users WHERE id = ?", (user_id,))
    row = c.fetchone()
    return row and row[0] == 1

async def create_invoice():
    url = "https://pay.crypt.bot/api/createInvoice"
    payload = {
        "asset": "USDT",
        "amount": str(PAY_AMOUNT_USD),
        "description": "GhostShell Lifetime Subscription",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
        "paid_btn_name": "openChannel",
        "paid_btn_url": "https://t.me/GhostShellBot"
    }
    headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as resp:
            data = await resp.json()
            return data["result"]["pay_url"]

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    args = message.text.split()
    ref_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None
    add_user(message.from_user.id, ref_id)
    await send_main_menu(message)

async def send_main_menu(msg):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ†Ô∏è –°–Ω–æ—Å–µ—Ä", callback_data="snoser")],
        [InlineKeyboardButton(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–∏–≤", callback_data="probiv")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info")]
    ])
    await msg.answer(
        "üëª <b>GhostShell</b> ‚Äî —Å–∏–ª—å–Ω–µ–π—à–∞—è OSINT —É—Ç–∏–ª–∏—Ç–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )

async def edit_main_menu(call):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ†Ô∏è –°–Ω–æ—Å–µ—Ä", callback_data="snoser")],
        [InlineKeyboardButton(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–∏–≤", callback_data="probiv")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info")]
    ])
    await call.message.edit_text(
        "üëª <b>GhostShell</b> ‚Äî —Å–∏–ª—å–Ω–µ–π—à–∞—è OSINT —É—Ç–∏–ª–∏—Ç–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )

@dp.callback_query(F.data == "main_menu")
async def back_to_main(call: types.CallbackQuery):
    await edit_main_menu(call)

@dp.callback_query(F.data == "info")
async def info_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    sub = "–ê–∫—Ç–∏–≤–Ω–∞" if is_subscribed(user_id) else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    profile = (
        f"üíé –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üÜî ID: {user_id}\n"
        f"üí≥ –ë–∞–ª–∞–Ω—Å: 0.0$\n"
        f"üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ë–∞–ª–∞–Ω—Å: 0.0$\n"
        f"üíú –ü—Ä–∏–≥–ª–∞—à–µ–Ω: 484312705\n"
        f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {sub}\n\n"
        f"‚è∞ –î–æ: {'–ë–µ—Å—Å—Ä–æ—á–Ω–∞—è' if sub == '–ê–∫—Ç–∏–≤–Ω–∞' else '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞ / –û–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ: @xmroman \n"
        f"{'‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞' if sub == '–ê–∫—Ç–∏–≤–Ω–∞' else '‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    )

    buttons = [
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="ref")]
    ]

    if user_id == ADMIN_ID:
        buttons.append([InlineKeyboardButton(text="üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.edit_text(profile, reply_markup=kb)

@dp.callback_query(F.data == "admin_panel")
async def admin_panel(call: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_give")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–æ–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_revoke")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="info")]
    ])
    await call.message.edit_text("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.callback_query(F.data == "admin_give")
async def admin_give(call: types.CallbackQuery):
    await call.message.edit_text("üõ† –§—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.", reply_markup=get_back_to_admin())

@dp.callback_query(F.data == "admin_revoke")
async def admin_revoke(call: types.CallbackQuery):
    await call.message.edit_text("üõ† –§—É–Ω–∫—Ü–∏—è –æ—Ç–∑—ã–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.", reply_markup=get_back_to_admin())

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(call: types.CallbackQuery):
    await call.message.edit_text("üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: [–±—É–¥–µ—Ç –ø–æ–∑–∂–µ]", reply_markup=get_back_to_admin())

@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(call: types.CallbackQuery):
    admin_states[call.from_user.id] = "awaiting_broadcast"
    await call.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=get_back_to_admin())

@dp.message()
async def handle_text_messages(message: types.Message):
    user_id = message.from_user.id
    if admin_states.get(user_id) == "awaiting_broadcast" and user_id == ADMIN_ID:
        admin_states.pop(user_id)
        await message.answer("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")

        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT id FROM users")
        users = c.fetchall()
        conn.close()

        success = 0
        for u in users:
            try:
                await bot.send_message(u[0], message.text)
                success += 1
            except Exception:
                continue

        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

def get_back_to_admin():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

@dp.callback_query(F.data == "buy")
async def buy_handler(call: types.CallbackQuery):
    await call.message.edit_text("‚è≥ –°–æ–∑–¥–∞—é —Å—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ USDT...")
    url = await create_invoice()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=url)],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="info")]
    ])
    await call.message.edit_text("üîê –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: <b>20$</b>\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

@dp.callback_query(F.data == "snoser")
async def snoser_handler(call: types.CallbackQuery):
    if not is_subscribed(call.from_user.id):
        await call.message.edit_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=get_back_main())
    else:
        await call.message.edit_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ:\n- –°–Ω–æ—Å –∫–∞–Ω–∞–ª–æ–≤\n- –°–Ω–æ—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤", reply_markup=get_back_main())

@dp.callback_query(F.data == "probiv")
async def probiv_handler(call: types.CallbackQuery):
    if not is_subscribed(call.from_user.id):
        await call.message.edit_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=get_back_main())
    else:
        await call.message.edit_text(
            "üîç –ü—Ä–æ–±–∏–≤:\n- –¢–µ–ª–µ—Ñ–æ–Ω\n- Telegram\n- VK\n- Email\n- IP\n- –ò–ù–ù / –°–ù–ò–õ–°",
            reply_markup=get_back_main()
        )

@dp.callback_query(F.data == "ref")
async def ref_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    await call.message.edit_text(
        f"üë• –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/GhostShellBot?start={user_id}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="info")]
        ])
    )

def get_back_main():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
